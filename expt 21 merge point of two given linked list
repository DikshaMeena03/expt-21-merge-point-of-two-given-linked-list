#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int value) {
        data = value;
        next = nullptr;
    }
};

int getLinkedListLength(Node* head) {
    int length = 0;
    Node* current = head;
    while (current != nullptr) {
        length++;
        current = current->next;
    }
    return length;
}

Node* findMergePoint(Node* head1, Node* head2) {
    if (head1 == nullptr || head2 == nullptr)
        return nullptr;

    int length1 = getLinkedListLength(head1);
    int length2 = getLinkedListLength(head2);

    int diff = std::abs(length1 - length2);

    Node* current1 = head1;
    Node* current2 = head2;

    if (length1 > length2) {
        while (diff > 0) {
            current1 = current1->next;
            diff--;
        }
    } else {
        while (diff > 0) {
            current2 = current2->next;
            diff--;
        }
    }

    while (current1 != nullptr && current2 != nullptr) {
        if (current1 == current2)
            return current1;

        current1 = current1->next;
        current2 = current2->next;
    }

    return nullptr;
}

int main() {
    // Create the first linked list: 1 -> 2 -> 3 -> 4 -> 5
    Node* node1 = new Node(1);
    Node* node2 = new Node(2);
    Node* node3 = new Node(3);
    Node* node4 = new Node(4);
    Node* node5 = new Node(5);

    node1->next = node2;
    node2->next = node3;
    node3->next = node4;
    node4->next = node5;

    // Create the second linked list: 6 -> 7 -> 8 -> 9 -> 4 -> 5
    Node* node6 = new Node(6);
    Node* node7 = new Node(7);
    Node* node8 = new Node(8);
    Node* node9 = new Node(9);

    node6->next = node7;
    node7->next = node8;
    node8->next = node9;
    node9->next = node4;

    Node* mergePoint = findMergePoint(node1, node6);

    if (mergePoint != nullptr) {
        std::cout << "Merge Point: " << mergePoint->data << std::endl;
    } else {
        std::cout << "No Merge Point Found" << std::endl;
    }

    // Clean up memory
    delete node1;
    delete node2;
    delete node3;
    delete node4;
    delete node5;
    delete node6;
    delete node7;
    delete node8;
    delete node9;

    return 0;
}
